Our idea for the final project has been an interactive dog application where the player can interact with and pet the
dog as well as play minigames and do other activities to gain experience/currency that can be used to buy items
from the shop.

Our CRC model includes the basic cards that we could think of, like Dog, Sprite, DogGameController, DogGamePresenter, and DogGame. It is possible in the future that
we will think of new classes, or decide that some classes just aren't needed.

The scenario walk-through details what happens when you click (pet) on a dog. To sum it up, the mouse input is sent to the DogGameController, which looks to see which
object the mouse coordinates are on. It calls that object's act method if it was indeed clicked. So for petting a dog, the DogManager's act method is called, which calculates
coins and exp earned.

Our skeleton program so far does exactly that; clicking on the moving dog sprite (courtesy of Undertale) will award coins and exp.

So far, our overall organization of the code and progress has been satisfactory. We are further ahead in our skeleton
code than previously expected, which enables us to add more complicated features and minigames in the later phases. The facade pattern of the managers
has been working decently well, and following Clean Architecture has made Use Case and Entity classes pretty easy to modify.

One question we have for ourselves is how exactly to implement the minigames in the future. Maybe something like you click a button to send you to a different screen
with the minigame on it - that would require splitting the minigame screens and the main screen into multiple screens, and we are figuring out how to implement this in an efficient manner.
What complicates it more is the threads in the Sprite and DogMover class - when we switch screens, will they still be running in the background, or should they be stopped? If we want
to make the dog a controllable character in a minigame, should we use a completely new DogManager? How would the DogManager know how to move the dog depending on the minigame?
When we switch screens, should all the Manager classes be removed and recreated?

Andy: Helped with CRC Model and specification, wrote the scenario walkthrough. Started on the DogGame, DogGamePresenter, and DogGameController classes. 
After everyone else did their initial tasks, did a quick code-review and refactoring to fix dependency issues and such. Helped implement the multithreading (with Timer) 
in Sprite and DogMover classes. Made the Drawabale class that DogManager implements. Thinking about how to make shop buttons in an efficient manner, and how to implement
minigames. Maybe a platformer? That would require gravity and collision detection, which would complicate the DogMover a bit.

Juntae: Contributed to the files DogManager, DogGamePresenter, DogGameController, Dog, Clickable, and Displayable. Helped with the CRC model. In phase 1 I plan on working on the game's economy system by implementing inventories for the player and the shop, the ability to purchase and sell items, genearting variable prices for items based on stock market API calls, etc.

Aria: Alongside pitching ideas for the CRC model and specification I managed to write the Sprite class with some help
from Andy. I also added the unit tests for most of the major classes that will be used. In the future, I will certainly
write at least one minigame of my own and I will also attempt to implement further graphical and sound features.

Fatimeh: I helped write the specification and contributed to the CRC cards, I also added all the CRC cards we designed
to the project on Github. I created an initial rough implementation of the Shop and ShopItem classes which I will continue
to work on in future phases as well. I also plan to contribute to the minigames we will implement, and create more classes
for items that can be bought from the Shop.

Jimin: I managed a DogMover class which continuously moves the dogsâ€™ locations. To implement this class, I also added
some codes in Dog class and DogController, but a Dog class should only store the features of dogs so Andy helped to
modify codes correctly by removing the draw method in a Dog class and adding it to a DogManager class. I am looking
forward to contributing to Shop class and also to at least one minigame.

Praket: I contributed to some of the ideas put forth for the CRC cards along with ensuring that clean architecture was
being followed while we were writing out the CRC cards itself. I also created an initial implementation of the Coin and
Exp Calculator, which I plan to further improve. I also plan to further contribute to the minigames and the shop items.

